import { register, login, logout, sendVerificationCode } from "./auth/AuthService";
import { API_URL, getAccessToken } from "./config/APIConfig";
import axios from "axios";

export const handleRegister = async (email, password, verificationcode, agree, day, year, month, setShowRegisterForm, setShowLoginForm, setSwRegister, setShowForgotForm) => {
    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    const isValidEmail = (email) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);

    // Ki·ªÉm tra m·∫≠t kh·∫©u h·ª£p l·ªá (t·ªëi thi·ªÉu 6 k√Ω t·ª±, √≠t nh·∫•t 1 ch·ªØ v√† 1 s·ªë)
    const isValidPassword = (password) => /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{6,}$/.test(password);

    // Ki·ªÉm tra m√£ x√°c th·ª±c (ph·∫£i c√≥ ƒë√∫ng 6 ch·ªØ s·ªë)
    console.log(verificationcode)
    const isValidCode = (verificationcode) => /^\d{6}$/.test(verificationcode);

    // Ki·ªÉm tra email
    if (!isValidEmail(email)) {
        alert("Email kh√¥ng h·ª£p l·ªá!");
        return;
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (!isValidPassword(password)) {
        alert("M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±, ch·ª©a √≠t nh·∫•t m·ªôt ch·ªØ c√°i v√† m·ªôt s·ªë.");
        return;
    }

    // Ki·ªÉm tra m√£ x√°c th·ª±c
    if (!isValidCode(verificationcode)) {
        alert("M√£ x√°c th·ª±c ph·∫£i l√† 6 ch·ªØ s·ªë.");
        return;
    }

    // Chuy·ªÉn ƒë·ªïi ng√†y sinh v·ªÅ ƒë·ªãnh d·∫°ng chu·∫©n YYYY-MM-DD
    const formattedMonth = month.toString().padStart(2, "0");
    const formattedDay = day.toString().padStart(2, "0");
    const dateOfBirth = `${year}-${formattedMonth}-${formattedDay}`;

    // Ki·ªÉm tra tu·ªïi (ph·∫£i t·ª´ 14 tr·ªü l√™n)
    const today = new Date();
    const birthDate = new Date(year, month - 1, day);
    const age = today.getFullYear() - birthDate.getFullYear();

    if (age < 14 || (age === 14 && today < new Date(today.getFullYear(), birthDate.getMonth(), birthDate.getDate()))) {
        alert("B·∫°n ph·∫£i t·ª´ 14 tu·ªïi tr·ªü l√™n ƒë·ªÉ ƒëƒÉng k√Ω.");
        return;
    }

    // D·ªØ li·ªáu h·ª£p l·ªá, ti·∫øn h√†nh ƒëƒÉng k√Ω
    const userData = {
        email,
        password,
        verificationcode,
        agree,
        dateOfBirth,
    };

    try {
        console.log(email, password, verificationcode);
        const res = await register(userData);
        if (res.error) {
            alert("ƒêƒÉng k√Ω th·∫•t b·∫°i: " + res.error);
        } else {
            alert("ƒêƒÉng k√Ω th√†nh c√¥ng!");
            setShowRegisterForm(false); // ƒê√≥ng form ƒëƒÉng k√Ω
            setShowLoginForm(true); // M·ªü form ƒëƒÉng nh·∫≠p
            setShowForgotForm(false); // ƒê√≥ng form qu√™n m·∫≠t kh·∫©u
            setSwRegister(false); // ƒê√≥ng form ƒëƒÉng k√Ω
        }
    } catch (error) {
        console.error("Register error:", error);
        alert("ƒêƒÉng k√Ω th·∫•t b·∫°i do l·ªói h·ªá th·ªëng.");
    }
};

export const handleSendCode = async (email) => {
    if (!email) {
        alert("Vui l√≤ng nh·∫≠p email tr∆∞·ªõc khi y√™u c·∫ßu m√£.");
        return;
    }

    try {
        const res = await sendVerificationCode(email);
        console.log("Ph·∫£n h·ªìi API:", res);

        if (res?.message) { // üî• Ki·ªÉm tra `message` ƒë√∫ng c√°ch
            alert(res.message);
        } else {
            alert("Kh√¥ng th·ªÉ g·ª≠i m√£ x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    } catch (error) {
        console.error("L·ªói khi g·ª≠i m√£:", error);
        alert("L·ªói h·ªá th·ªëng, kh√¥ng th·ªÉ g·ª≠i m√£.");
    }
};

export const handleLogin = async (email, password) => {
    try {
        console.log(email, password)
        const res = await login(email, password);
        console.log(res)
        if (res) {
            sessionStorage.setItem("user", JSON.stringify(res.user));
            window.location.href = `/@${res.user.userid}`; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang c√° nh√¢n c·ªßa ng∆∞·ªùi d√πng
        } else {
            alert("Login failed! Check your email and password.");
        }
    } catch (error) {
        console.error("Login error:", error);
        alert("Login failed due to an error.");
    }
};

export const handleLogout = async () => {
    try {
        const res = await logout();
        console.log(res);
        sessionStorage.removeItem("user");
        window.location.href = "/"; // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
    } catch (error) {
        alert("Logout failed!");
    }
};

// L·∫•y profile
export const getProfile = async (uid) => {
    const token = getAccessToken();
    try {
        const response = await axios.get(`${API_URL}/${uid}`,
            {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                },
                withCredentials: true
            });

        console.log("K·∫øt qu·∫£:", response.data);
        return { status: true, data: response.data.userProfile };
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error.response?.data || error.message);
        return { status: false };
    }
};

// L·∫•y profile
export const checkProfile = async () => {
    const token = getAccessToken();
    try {
        const response = await axios.post(`${API_URL}/check-profile`,
            {},
            {
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`
                }
            });

        //console.log("K·∫øt qu·∫£:", response.data);
        sessionStorage.setItem("user", JSON.stringify(response.data.userProfile));
        return { status: true, data: response.data.userProfile };
    } catch (error) {
        console.error("L·ªói ƒëƒÉng k√Ω:", error.response?.data || error.message);
        return { status: false };
    }
};

export const changeInformation = async (formData) => {
    const token = getAccessToken();
    try {
        const response = await axios.put(`${API_URL}/update-profile`, formData, {
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`
            }
        });
        console.log(response.data.message);
        sessionStorage.setItem("user", JSON.stringify(response.data.userProfile));
        alert("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng");
        window.location.href = `/@${response.data.userProfile.userid}`;
        return response.data;
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:", error);
        alert("C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i");
        throw error;
    }
};

